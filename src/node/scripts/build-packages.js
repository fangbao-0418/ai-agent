#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Starting multi-platform package build...');

// Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
const outputDir = path.join(__dirname, '..', 'dist3');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
  console.log(`‚úÖ Created output directory: ${outputDir}`);
}

// ÊûÑÂª∫Ê≠•È™§
const steps = [
  {
    name: 'TypeScript compilation',
    command: 'npm run build:tsc',
    description: 'ÁºñËØëTypeScript‰ª£Á†Å'
  },
  {
    name: 'Bundle with NCC',
    command: 'npm run build:tcp',
    description: '‰ΩøÁî®NCCÊâìÂåÖ‰ª£Á†Å'
  }
];

// esbuild ÊûÑÂª∫Ê≠•È™§ (Êé®Ëçê)
const esbuildSteps = [
  {
    name: 'ESBuild compilation',
    command: 'npm run build',
    description: '‰ΩøÁî®esbuildÁºñËØëÂíåÊâìÂåÖ‰ª£Á†Å'
  }
];

// Windows ‰ºòÂåñÊûÑÂª∫Ê≠•È™§
const windowsSteps = [
  {
    name: 'ESBuild Windows compilation',
    command: 'npm run build:windows',
    description: '‰ΩøÁî®esbuild‰∏∫Windows‰ºòÂåñÁºñËØëÂíåÊâìÂåÖ‰ª£Á†Å'
  }
];

// Âπ≥Âè∞ÊûÑÂª∫ÈÖçÁΩÆ
const platforms = [
  {
    name: 'macOS (ARM64)',
    command: 'npm run build:mac',
    output: 'index.app',
    description: 'ÊûÑÂª∫macOS ARM64ÁâàÊú¨'
  },
  {
    name: 'Windows (x64)',
    command: 'npm run build:win', 
    output: 'index.exe',
    description: 'ÊûÑÂª∫Windows x64ÁâàÊú¨'
  },
  {
    name: 'Windows (ARM64)',
    command: 'npm run build:win-arm',
    output: 'index-arm.exe', 
    description: 'ÊûÑÂª∫Windows ARM64ÁâàÊú¨'
  }
];

try {
  // Ëé∑ÂèñË¶ÅÊûÑÂª∫ÁöÑÂπ≥Âè∞
  const targetPlatform = process.argv[2];
  const useEsbuild = process.argv.includes('--esbuild') || process.env.USE_ESBUILD === 'true';
  
  // ÈÄâÊã©ÊûÑÂª∫Ê≠•È™§
  let buildSteps = steps; // ÈªòËÆ§‰ΩøÁî® tsc + ncc
  
  if (useEsbuild) {
    buildSteps = esbuildSteps;
    console.log('üì¶ Using esbuild for compilation...');
  } else if (targetPlatform && targetPlatform.toLowerCase().includes('win')) {
    buildSteps = windowsSteps;
    console.log('üì¶ Using Windows-optimized esbuild...');
  }
  
  // ÊâßË°åÊûÑÂª∫Ê≠•È™§
  console.log('\nüì¶ Preparing build...');
  buildSteps.forEach(step => {
    console.log(`üîÑ ${step.description}...`);
    execSync(step.command, { stdio: 'inherit', cwd: __dirname + '/..' });
    console.log(`‚úÖ ${step.name} completed`);
  });

  if (targetPlatform) {
    // ÊûÑÂª∫ÁâπÂÆöÂπ≥Âè∞
    const platform = platforms.find(p => 
      p.name.toLowerCase().includes(targetPlatform.toLowerCase()) ||
      p.output.includes(targetPlatform.toLowerCase())
    );
    
    if (platform) {
      console.log(`\nüèóÔ∏è  Building for ${platform.name}...`);
      execSync(platform.command, { stdio: 'inherit', cwd: __dirname + '/..' });
      console.log(`‚úÖ ${platform.name} build completed: dist3/${platform.output}`);
    } else {
      console.error(`‚ùå Unknown platform: ${targetPlatform}`);
      console.log('Available platforms: mac, win, win-arm');
      process.exit(1);
    }
  } else {
    // ÊûÑÂª∫ÊâÄÊúâÂπ≥Âè∞
    console.log('\nüèóÔ∏è  Building for all platforms...');
    platforms.forEach(platform => {
      console.log(`\nüîÑ ${platform.description}...`);
      try {
        execSync(platform.command, { stdio: 'inherit', cwd: __dirname + '/..' });
        console.log(`‚úÖ ${platform.name} completed: dist3/${platform.output}`);
      } catch (error) {
        console.error(`‚ùå Failed to build ${platform.name}:`, error.message);
      }
    });
  }

  console.log('\nüéâ Package build process completed!');
  console.log('\nüìÅ Built packages:');
  
  // ÂàóÂá∫ÁîüÊàêÁöÑÊñá‰ª∂
  try {
    const files = fs.readdirSync(outputDir);
    files.forEach(file => {
      const filePath = path.join(outputDir, file);
      const stats = fs.statSync(filePath);
      const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      console.log(`   üì¶ ${file} (${sizeInMB} MB)`);
    });
  } catch (error) {
    console.log('   (No files found in output directory)');
  }

} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  process.exit(1);
} 
version: '3.8'

services:
  # C++内置Node.js应用程序 - 完整版
  cppnode-app:
    build:
      context: .
      dockerfile: Dockerfile.embedded
      target: runtime
    image: cppnode-app:latest
    container_name: cppnode-app
    restart: unless-stopped
    ports:
      - "3000:3000"    # Node.js API端口
      - "5900:5900"    # VNC端口
    volumes:
      - app_data:/app/data
      - app_logs:/app/data/logs
      - ./config:/app/data/config:ro  # 只读配置挂载
    environment:
      - NODE_DIR=/app/data
      - QT_QPA_PLATFORM=xcb
      - DISPLAY=:1
    command: ["--mode", "gui", "--vnc", "--vnc-password", "cppnode123"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cppnode-network

  # 无头模式版本（仅API服务）
  cppnode-headless:
    build:
      context: .
      dockerfile: Dockerfile.embedded
      target: runtime
    image: cppnode-app:latest
    container_name: cppnode-headless
    restart: unless-stopped
    ports:
      - "3001:3000"    # 避免端口冲突
    volumes:
      - headless_data:/app/data
      - headless_logs:/app/data/logs
    environment:
      - NODE_DIR=/app/data
      - QT_QPA_PLATFORM=offscreen
    command: ["--mode", "headless"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - cppnode-network
    profiles:
      - headless

  # 开发调试版本
  cppnode-dev:
    build:
      context: .
      dockerfile: Dockerfile.embedded
      target: runtime
    image: cppnode-app:latest
    container_name: cppnode-dev
    restart: "no"
    ports:
      - "3002:3000"
      - "5901:5900"
    volumes:
      - ./src:/app/src:ro  # 开发时源码挂载
      - dev_data:/app/data
      - dev_logs:/app/data/logs
    environment:
      - NODE_DIR=/app/data
      - NODE_ENV=development
      - DEBUG=1
    command: ["--mode", "gui", "--vnc", "--vnc-password", "dev123"]
    networks:
      - cppnode-network
    profiles:
      - dev

  # Web管理界面（可选）
  cppnode-web:
    image: nginx:alpine
    container_name: cppnode-web
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - cppnode-app
    networks:
      - cppnode-network
    profiles:
      - web

  # 监控服务
  cppnode-monitor:
    image: prom/prometheus:latest
    container_name: cppnode-monitor
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - cppnode-network
    profiles:
      - monitoring

volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/app
  app_logs:
    driver: local
  headless_data:
    driver: local
  headless_logs:
    driver: local
  dev_data:
    driver: local
  dev_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  cppnode-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 